#! python

import os



def build(ctx):

    def out_models(*args):
        return ctx.path_to(ctx, 'OUT_MODEL_SPECS', *args)

    def out_analysis(*args):
        return ctx.path_to(ctx, 'OUT_ANALYSIS', *args)

    def out_data(*args):
        return ctx.path_to(ctx, 'OUT_DATA', *args)

    def abspath_test(arg):
        return os.path.join(ctx.path.abspath(), arg)

    ctx(
        features = 'run_py_script',
        source = 'test_transition.py',
        deps = 'transition.py',
        append = abspath_test('test_transition.py')
    )
    ctx(
        features = 'run_py_script',
        source = 'test_measurement.py',
        deps = 'measurement.py',
        append = abspath_test('test_measurement.py')
    )
    ctx.add_group()
    
    ctx(
        features = 'run_py_script',
        source = 'prepare_data.py',
        target = [
                    out_analysis('meas_fac1.pkl'),
                    out_analysis('meas_fac2.pkl'),
                    out_analysis('meas_fac3.pkl')
                 ],
        deps=[
                  #out_data('tables','data_table_1.dta'),
                  #out_data('tables','data_table_2.dta'),
                  #out_data('tables','data_table_3.dta')
           ]
    )
    ctx(
	features='run_py_script',
	source='extract_true_factors.py',
	deps = [
		   #out_data('tables','data_table_1.dta'),
                   #out_data('tables','data_table_2.dta')
	],
	target = out_analysis('true_facs.pkl')
    )

    ctx(
        features='run_py_script',
        source='initial_draws.py',
        target=[
    	    out_analysis('true_rnd_prior.pickle'),
            out_analysis('true_deg_prior.pickle'),
    	    out_analysis('transition_errors.pickle')
        ],
    	deps=[
    	    ctx.path_to(ctx, 'IN_MODEL_SPECS', 'true_prior.json'),
    	    ctx.path_to(ctx, 'IN_MODEL_SPECS', 'smoother.json'),
    	    ctx.path_to(ctx, 'IN_MODEL_SPECS', 'transitions.json'),
    	    ctx.path_to(ctx, 'OUT_ANALYSIS', 'true_facs.pkl')
    	]
    )
    
    for spec in 'rnd_prior', 'deg_prior':
        ctx(
        	features = 'run_py_script',
        	source = 'particle_smoother.py',
            target = out_analysis('{}_factor_estimates.pkl'.format(spec)),
            deps = [
                        out_analysis('meas_fac1.pkl'),
                        out_analysis('meas_fac2.pkl'),
                        out_analysis('meas_fac3.pkl'),
                        out_analysis('true_{}.pickle'.format(spec)),
                        out_analysis('transition_errors.pickle'),
    		            out_models('measurements.json'),
                        out_models('smoother.json'),
                        out_models('transitions.json')
                   ],
            append = spec,
            name = 'particle_smoother_{}'.format(spec)
        )


		    
    


   
